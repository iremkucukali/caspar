var app = require('../app');
var http = require('http');
var models = require("../models");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || 8080);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

models.sequelize.sync().then(function () {
    server.listen(port, function () {
        console.log('Process ' + process.pid + ' is listening to all incoming requests');
    });
});

server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
}

/**
 * HTTP CLIENT
 */
var static = require( 'node-static' ),
    portC = 8094,
    http = require( 'http' );

// config
var file = new static.Server( './public/', {
    cache: 0,
    gzip: true
} );
// serve
http.createServer( function ( request, response ) {
    request.on( 'end', function () {
        file.serve( request, response );
    }).resume();
}).listen( portC );